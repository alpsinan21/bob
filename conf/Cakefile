exec = require('child_process').exec
fs = require('fs')
path = require('path')

appDir = process.cwd
bobDir = path.join __dirname, '..'
conf = JSON.parse fs.readFileSync 'package.json'
execFn = (commands) ->
    console.log commands.join('\n')
    exec (commands.join ';'), (err, stdout, stderr) ->
        if stdout
            console.log stdout
        if stderr
            console.error stderr

argVal = (obj, propNamesDsv) ->
    propNames = propNamesDsv.split '.'
    temp = obj
    value = undefined
    propNames.forEach (propName) ->
        if temp[propName]
            value = temp[propName]
            temp = value
        else
            value = ''
    return value

BUILD_BASE = path.join appDir, 'build'
BUILD_LINT = path.join BUILD_BASE, 'lint'
BUILD_TEST = path.join BUILD_BASE, 'test'
BUILD_PACKAGE = path.join BUILD_BASE, 'package'
APP_LIB_DIR = path.join appDir, 'lib'
APP_TEST_DIR = path.join appDir, 'test'
APP_NAME = argVal conf, 'name'
APP_VERSION = argVal conf, 'version'
APP_FULLNAME = APP_NAME + '-' + APP_VERSION

task 'init', '', (options) ->
    execFn ['echo "bob shall build."']

task 'clean', '', (options) ->
    invoke 'init'
    execFn [
        'rm -rf ' + BUILD_BASE
        'rm -f nohup.*'
        'rm -f *.log'
    ]

task 'lint', '', (options) ->
    invoke 'init'
    execFn [
        'mkdir -p ' + BUILD_LINT
        'nodelint --config ' + (path.join bobDir, 'conf/lint.js') + ' --reporter ' + (path.join bobDir, 'conf/lintreporter.js') + ' ' + (argVal conf, 'app.build.lint') + ' ' + APP_LIB_DIR + ' ' + APP_TEST_DIR + ' | tee ' + (path.join BUILD_LINT, 'jslint.xml')
    ]

task 'test', '', (options) ->
    invoke 'init'
    execFn [
        'mkdir -p ' + BUILD_TEST
        'vows ' + (path.join APP_TEST_DIR, '*.js')
    ]
    
task 'package', '', (options) ->
    invoke 'init'
    execFn [
        'mkdir -p ' + BUILD_PACKAGE
        'tar --exclude ' + APP_TEST_DIR + ' -X ' + (path.join bobDir, 'conf/packageexclude.txt') + ' -C ' + (path.join appDir, (argVal conf, 'app.src.dir')) + ' -cvf ' + path.join BUILD_PACKAGE, APP_FULLNAME + '.tar' + ' .'
        'gzip ' + path.join BUILD_PACKAGE, APP_FULLNAME + '.tar'
    ]

task 'deploy', '', (options) ->
    invoke 'package'
    execFn [
        'ssh -p ' + (argVal conf, 'app.deploy.port') + ' ' + (argVal conf, 'app.deploy.host') + ' "cd ' + (argVal conf, 'app.deploy.dir') + '; rm -rf *;"'
        'scp -P ' + (argVal conf, 'app.deploy.port') + ' ' + (path.join BUILD_PACKAGE, APP_FULLNAME + '.tar.gz ') + (argVal conf, 'app.deploy.host') + ':' + (argVal conf, 'app.deploy.dir')
        'ssh -p ' + (argVal conf, 'app.deploy.port') + ' ' + (argVal conf, 'app.deploy.host') + ' "cd ' + (argVal conf, 'app.deploy.dir') + '; gunzip *.tar.gz; tar -xvf *.tar; rm *.tar;"'
    ]

task 'remote-r', '', (options) ->
    execFn [
        'ssh -p ' + (argVal conf, 'app.deploy.port') + ' ' + (argVal conf, 'app.deploy.host') + ' . ~/.bash_profile; ' + (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + (argVal conf, 'app.deploy.dir') + ' stop; ' + (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + (argVal conf, 'app.deploy.dir') + ' start prd'
    ]
    
task 'deploy-r', '', (options) ->
    invoke 'deploy'
    invoke 'remote-r'
	
task 'start-dev', '', (options) ->
    execFn [
        (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + appDir + ' start dev'
    ]
        
task 'start-prd', '', (options) ->
    execFn [
        (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + appDir + ' start prd'
    ]

task 'stop', '', (options) ->
    execFn [
        (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + appDir + ' stop'
    ]
    
task 'restart-dev', '', (options) ->
    invoke 'stop'
    invoke 'start-dev'

task 'restart-prd', '', (options) ->
    invoke 'stop'
    invoke 'start-prd'

task 'status', '', (options) ->
    execFn [
        (path.join bobDir, 'bin/ghibli.sh') + ' ' + APP_NAME + ' ' + appDir + ' status'
    ]

task 'tools', '', (options) ->
    execFn [
        'npm install -g nodelint vows'
    ]