#!/usr/bin/env node

var DEFAULT_ENV = 'development',
    child_process = require('child_process'),
    fs = require('fs'),
    path = require('path'),
    appDir = process.cwd(),
    bobDir = path.join(__dirname, '..'),
    conf = JSON.parse(fs.readFileSync('package.json')),
    argVal, command, exec;

argVal = function (obj, propNamesDsv) {
    var propNames = propNamesDsv.split('.'),
        temp = obj,
        value = undefined;
    propNames.forEach(function (propName) {
        if (temp[propName]) {
            value = temp[propName];
            temp = value;
        } else {
            value = '';
        }
    });
    return value;
}

command = 'make -f ' + bobDir + '/conf/Makefile '
    + 'BOB_DIR="' + bobDir + '" '
    + 'APP_NAME="' + argVal(conf, 'name') + '" '
    + 'APP_VERSION="' + argVal(conf, 'version') + '" '
    + 'APP_DIR="' + appDir + '" '
    + 'BUILD_LINT_FILES="' + argVal(conf, 'app.build.lint') + '" '
    + 'DEPLOY_HOST="' + argVal(conf, 'app.deploy.host') + '" '
    + 'DEPLOY_PORT="' + argVal(conf, 'app.deploy.port') + '" '
    + 'DEPLOY_DIR="' + argVal(conf, 'app.deploy.dir') + '" '
    + 'NODE_ENV="' + (process.env.NODE_ENV || DEFAULT_ENV) + '" '
    + process.argv.slice(2, process.argv.length).join(' ');
//console.log("Command:" + command);

exec = child_process.exec(command,
    function (error, stdout, stderr) {
        if (error) {
            console.error(error.message);
        } else {
            console.log(stdout);
        }
    });